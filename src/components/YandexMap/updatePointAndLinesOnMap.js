// TODO: [üê±üëÄ] –í–∏–¥–∏–º–æ, —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ src/components/InputPoint/index.js

import {mainStore} from '../../data/Stores';
import Dispatcher from '../../data/appDispatcher'; 

function myEventHandler (event){
  const target = event.get('target');
  const newCoordinates = target.geometry.getCoordinates();
  const id = target.properties.get('myId');
  mainStore.YandexMap.coordsArr[id] = newCoordinates;
  // –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞–¥—Ä–µ—Å
  mainStore.YandexMap.ymaps.geocode(newCoordinates)
    .then(
      function (res) {
        if (res.geoObjects.get(0) !== null) {
          // –ø—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Ç–æ—á–∫–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
          const firstGeoObject = res.geoObjects.get(0);
          
          const adressFromCoords = [
            // –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏–ª–∏ –≤—ã—à–µ—Å—Ç–æ—è—â–µ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ-—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.
            firstGeoObject.getLocalities().length ? firstGeoObject.getLocalities() : firstGeoObject.getAdministrativeAreas(),
            // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–æ —Ç–æ–ø–æ–Ω–∏–º–∞, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—É–ª null, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è.
            firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()
          ].filter(Boolean).join(', ');
          return(adressFromCoords);
        } else {
          console.log('res.geoObjects.get(0) === 0', res.geoObjects.get(0));
        }
      },
      function (err) {
        console.log('–æ—à–∏–±–∫–∞ –≤ myGeocoder', err);
        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    })
    .then(
      (adress) => {
        // –ß–µ—Ä–µ–∑ Dispatcher –æ–±–Ω–æ–≤–ª—è—é –º–∞—Å—Å–∏–≤ mainStore.Container.points, —á—Ç–æ–±—ã –¥–æ–±–∏—Ç—å—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –æ —Ç–æ—á–∫–∞—Ö –≤ —Å–ø–∏—Å–∫–µ —Ç–æ—á–µ–∫
        Dispatcher.dispatch({
          type: 'CHANGE_ENTRY_POINT',
          value: adress,
          id: id
        })
        updatePointsAndLinesOnMap();
      },
      (err) => {
        console.log('–æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞', err)
    });
}
  
function updatePointsAndLinesOnMap(){
  // –û—á–∏—â–∞–µ–º –≥–µ–æ–∫–æ–ª–µ–∫—Ü–∏—é
  mainStore.YandexMap.myGeoObjectCollectionPoints.removeAll();
  mainStore.YandexMap.myGeoObjectCollectionLines.removeAll();

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏ –∏ –ª–∏–Ω–∏–∏ –≤ –≥–µ–æ–∫–æ–ª–µ–∫—Ü–∏—é
  mainStore.YandexMap.myGeoObjectCollectionLines.add(new ymaps.Polyline(mainStore.YandexMap.coordsArr, {}, { draggable: true }));
  mainStore.YandexMap.coordsArr.forEach((coords, index) => {
    let point = new ymaps.GeoObject({
      // –û–ø–∏—Å–∞–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏.
      geometry: {
        type: "Point",
        coordinates: coords
      },
      // –°–≤–æ–π—Å—Ç–≤–∞.
      properties: {
        // –ö–æ–Ω—Ç–µ–Ω—Ç –º–µ—Ç–∫–∏.
        iconContent: index + 1,
        myId: index,
        // –ß—Ç–æ–±—ã –±–∞–ª—É–Ω –∏ —Ö–∏–Ω—Ç –æ—Ç–∫—Ä—ã–≤–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ç–∫–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞.
        // balloonContentHeader: "–ò–Ω—Ñ–æ:",
        balloonContentBody: `${mainStore.Container.points[index]}`,
        balloonContentFooter: `${coords.map((coord)=>' ' + coord.toFixed(2))}`,
      }
    }, {
        // –û–ø—Ü–∏–∏.
        // –ò–∫–æ–Ω–∫–∞ –º–µ—Ç–∫–∏ –±—É–¥–µ—Ç —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
        preset: 'islands#blackStretchyIcon',
        // –ú–µ—Ç–∫—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å.
        draggable: true
      })
    point.events.add('dragend', myEventHandler);
    mainStore.YandexMap.myGeoObjectCollectionPoints.add(point);
  })
}

function updateLines(){
  mainStore.YandexMap.myGeoObjectCollectionLines.removeAll();
  mainStore.YandexMap.myGeoObjectCollectionLines.add(new ymaps.Polyline(mainStore.YandexMap.coordsArr, {}, { draggable: true }));
}


export default updatePointsAndLinesOnMap;