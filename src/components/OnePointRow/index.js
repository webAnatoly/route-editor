import React from 'react';
import ReactDOM from 'react-dom';
import s from './style.css';
import { mainStore } from '../../data/Stores';
import Dispatcher from '../../data/appDispatcher';
import keyMirror from 'fbjs/lib/keyMirror';
import updatePointsAndLinesOnMap from '../YandexMap/updatePointAndLinesOnMap'

const actions = keyMirror({
  REMOVE_ENTRY_POINT: null
});

Dispatcher.register((action) => {
  switch (action.type) {
    case actions.REMOVE_ENTRY_POINT:
      let prevArr = mainStore.Container.points;
      let arrWithoutElement = prevArr.filter((item, index) => {
        return index != action.id;
      });
      mainStore.Container.points = arrWithoutElement;

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä deleteFromCoords, —Ç–æ —É–¥–∞–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Å —Ç–∞–∫–∏–º –∂–µ –∏–Ω–¥–µ–∫—Å–æ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (action.deleteFromCoords) {
        let prevCoordsArr = mainStore.YandexMap.coordsArr;
        let coordsArrWithoutDeletedCoord = prevCoordsArr.filter((item, index) => {
          return index != action.id;
        });

        mainStore.YandexMap.coordsArr = coordsArrWithoutDeletedCoord; // –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      }
      
      // –û–±–Ω–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –∏ –ª–∏–Ω–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
      updatePointsAndLinesOnMap();

      mainStore.setState('Container', mainStore.Container); // —Ç—É—Ç —è –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é. –ù–∞–≤–µ—Ä–Ω–æ–µ –ª—É—á—à–µ –±—É–¥–µ—Ç –µ—Å–ª–∏ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ points. –ù—É –ø–æ–∫–∞ —Ç–∞–∫ –ø—É—Å—Ç—å –ø–æ–±—É–¥–µ—Ç.
      break;
    default:
      return null;
  }
})

export default class OnePointRow extends React.Component {
  constructor(props) {
    super(props);
    this.myRef = React.createRef(); // TODO: [üê±üëÄ] –ù–µ —è—Å–Ω–æ, –∑–∞—á–µ–º –∑–¥–µ—Å—å ref
    this.state = mainStore.OnePointRow;
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(event) {
    Dispatcher.dispatch({
      type: 'REMOVE_ENTRY_POINT', // TODO: [üê±üëÄ] –ó–∞–¥–∞–Ω–æ —Å—Ç—Ä–æ–∫–æ–π, –∞ –Ω–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
      id: this.props.id,
      deleteFromCoords: true,
    })
  }
  
  render() {
    const id = this.props.id;
    return (
      <div ref={this.myRef} className={`${s.rowContainer}`} id={id} data-about={'OnePointRow'}>
        <span className={`${s.noSelect}`}>{this.props.value}</span>
        <button className={s.button} onClick={this.handleClick}><span className={s.noSelect}>&#10005;</span></button>
      </div>
    )
  }
}